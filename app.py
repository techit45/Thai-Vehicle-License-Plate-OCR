from flask import Flask, render_template, request, jsonify, redirect, url_for
import requests
import os
import json
from datetime import datetime
from werkzeug.utils import secure_filename
import cv2
import numpy as np
from ultralytics import YOLO
from firebase_config import firebase_manager, save_detection, get_recent_detections, get_stats

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# Load YOLO model
MODEL_PATH = 'best.pt'  # ‡∏´‡∏£‡∏∑‡∏≠ 'models/best.pt' ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models
try:
    yolo_model = YOLO(MODEL_PATH)
    print(f"‚úÖ YOLO model loaded: {MODEL_PATH}")
except Exception as e:
    print(f"‚ùå Failed to load YOLO model: {e}")
    yolo_model = None

# ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS headers manually
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API
API_URL = "https://api.aiforthai.in.th/lpr-iapp"
API_KEY = "GgY2UsQsZRrZxeWKSilQ8uKZGAFLiagW"

# Mock API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ mock)
USE_MOCK_API = False  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ API ‡∏à‡∏£‡∏¥‡∏á
MOCK_API_URL = "http://127.0.0.1:5001/mock-lpr"

def allowed_file(filename):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg', 'gif', 'bmp'}

def detect_license_plate_yolo(image_path, confidence_threshold=0.7):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢ YOLO model"""
    if yolo_model is None:
        return None
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û
        image = cv2.imread(image_path)
        if image is None:
            return None
            
        # Run YOLO detection
        results = yolo_model(image)
        
        # Extract detections
        detections = []
        for result in results:
            boxes = result.boxes
            if boxes is not None:
                for box in boxes:
                    # Get confidence score
                    conf = float(box.conf[0])
                    
                    # Filter by confidence threshold
                    if conf >= confidence_threshold:
                        # Get bounding box coordinates
                        x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                        
                        detection = {
                            'bbox': [int(x1), int(y1), int(x2), int(y2)],
                            'confidence': conf,
                            'class': int(box.cls[0]),
                            'width': int(x2 - x1),
                            'height': int(y2 - y1)
                        }
                        detections.append(detection)
        
        print(f"üéØ YOLO detected {len(detections)} license plates with conf > {confidence_threshold}")
        return detections
        
    except Exception as e:
        print(f"‚ùå YOLO detection error: {e}")
        return None

def crop_license_plate(image_path, bbox):
    """‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏° bounding box"""
    try:
        image = cv2.imread(image_path)
        x1, y1, x2, y2 = bbox
        
        # Add padding
        padding = 10
        h, w = image.shape[:2]
        x1 = max(0, x1 - padding)
        y1 = max(0, y1 - padding)
        x2 = min(w, x2 + padding)
        y2 = min(h, y2 + padding)
        
        # Crop image
        cropped = image[y1:y2, x1:x2]
        
        # Save cropped image
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")[:-3]
        cropped_filename = f"cropped_{timestamp}.jpg"
        cropped_path = os.path.join(app.config['UPLOAD_FOLDER'], cropped_filename)
        cv2.imwrite(cropped_path, cropped)
        
        return cropped_path
        
    except Exception as e:
        print(f"‚ùå Crop error: {e}")
        return None

def send_to_lpr_api(image_path):
    """‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á API AIforThai LPR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"""
    
    # ‡πÉ‡∏ä‡πâ Mock API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    if USE_MOCK_API:
        import random
        import time
        
        print(f"üé≠ Using Mock API: {MOCK_API_URL}")
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        time.sleep(random.uniform(0.2, 0.8))
        
        # 70% chance ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢
        if random.random() < 0.7:
            mock_plates = ["‡∏Å‡∏Ç 1234", "1‡∏Å‡∏Å 2345", "‡∏ï‡∏ì 3754", "2‡∏Å‡∏£ 5678", "‡∏ö‡∏à 9876"]
            plate = random.choice(mock_plates)
            confidence = random.uniform(80, 95)
            
            return {
                'success': True,
                'license_plate': plate,
                'confidence': confidence / 100.0,
                'mock': True,
                'raw_response': {'lp_number': plate, 'conf': confidence}
            }
        else:
            return {
                'success': False,
                'license_plate': '',
                'confidence': 0,
                'error': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û (Mock)',
                'mock': True
            }
    
    # ‡πÉ‡∏ä‡πâ API ‡∏à‡∏£‡∏¥‡∏á
    try:
        payload = {}
        
        with open(image_path, 'rb') as img_file:
            files = [('file', ('image.jpg', img_file, 'image/jpeg'))]
            headers = {'apikey': API_KEY}
            
            response = requests.post(API_URL, headers=headers, data=payload, files=files, timeout=20)
        
        print(f"API Response Status: {response.status_code}")
        print(f"API Response: {response.text}")
        
        if response.status_code == 200:
            api_result = response.json()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡πÉ‡∏´‡∏°‡πà
            if api_result.get('status') == 200 and api_result.get('lp_number'):
                # API ‡πÉ‡∏´‡∏°‡πà‡∏™‡πà‡∏á lp_number ‡πÅ‡∏ó‡∏ô LPR array
                return {
                    'success': True,
                    'license_plate': api_result.get('lp_number', ''),
                    'confidence': api_result.get('conf', 0) / 100.0,  # Convert percentage to decimal
                    'raw_response': api_result
                }
            elif 'LPR' in api_result and len(api_result['LPR']) > 0:
                # Old API format fallback
                lpr_data = api_result['LPR'][0]
                return {
                    'success': True,
                    'license_plate': lpr_data.get('plate', ''),
                    'confidence': lpr_data.get('confidence', 0),
                    'raw_response': api_result
                }
            else:
                return {
                    'success': False,
                    'license_plate': '',
                    'confidence': 0,
                    'error': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û',
                    'raw_response': api_result
                }
        elif response.status_code == 401:
            return {
                'success': False,
                'error': 'API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
                'message': response.text
            }
        elif response.status_code == 429:
            return {
                'success': False,
                'error': 'API Rate Limit - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà',
                'message': response.text
            }
        else:
            return {
                'success': False,
                'error': f'API Error: {response.status_code}',
                'message': response.text
            }
            
    except requests.exceptions.Timeout:
        return {
            'success': False,
            'error': 'API Timeout - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'
        }
    except requests.exceptions.ConnectionError:
        return {
            'success': False,
            'error': 'Connection Error - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ'
        }
    except Exception as e:
        return {
            'success': False,
            'error': f'Error calling LPR API: {str(e)}'
        }

@app.route('/')
def index():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"""
    return render_template('index.html')

@app.route('/webcam')
def webcam():
    """‡∏´‡∏ô‡πâ‡∏≤ Webcam Detection"""
    return render_template('webcam.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå"""
    if 'file' not in request.files:
        return jsonify({'error': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'})
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'})
    
    if file and allowed_file(file.filename):
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        filename = secure_filename(file.filename)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        result = send_to_lpr_api(filepath)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô result
        result['uploaded_file'] = filename
        result['upload_time'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        return jsonify(result)
    else:
        return jsonify({'error': '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PNG, JPG, JPEG, GIF, BMP'})

@app.route('/api/detect', methods=['POST'])
def api_detect():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏à‡∏≤‡∏Å webcam"""
    if 'file' not in request.files:
        return jsonify({'success': False, 'error': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤'})
    
    file = request.files['file']
    confidence = request.form.get('confidence', '0.25')
    source = request.form.get('source', 'unknown')
    
    if file.filename == '':
        return jsonify({'success': False, 'error': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'})
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")[:-3]  # ‡∏£‡∏ß‡∏° milliseconds
        temp_filename = f"webcam_{timestamp}.jpg"
        temp_filepath = os.path.join(app.config['UPLOAD_FOLDER'], temp_filename)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        file.save(temp_filepath)
        
        print(f"üìÅ Saved temp file: {temp_filepath}")
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        result = send_to_lpr_api(temp_filepath)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        result['source'] = source
        result['confidence_threshold'] = float(confidence)
        result['capture_time'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        result['temp_file'] = temp_filename
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase (‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô)
        if result.get('success') and result.get('license_plate'):
            try:
                firebase_doc_id = firebase_manager.save_detection_result(
                    license_plate=result['license_plate'],
                    confidence_api=result.get('confidence', 0),
                    detection_mode="manual",
                    api_response=result  # ‡∏™‡πà‡∏á API response ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                )
                if firebase_doc_id:
                    result['firebase_doc_id'] = firebase_doc_id
                    print(f"‚úÖ Saved to Firebase: {firebase_doc_id}")
            except Exception as firebase_error:
                print(f"‚ö†Ô∏è Firebase save failed: {firebase_error}")
                # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Firebase error ‡∏ó‡∏≥‡πÉ‡∏´‡πâ API fail
        
        print(f"üì° API Result: {result}")
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á API (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤ debug)
        # os.remove(temp_filepath)
        
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå Error in api_detect: {str(e)}")
        return jsonify({
            'success': False, 
            'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'
        })

@app.route('/api/detect-yolo', methods=['POST'])
def api_detect_yolo():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ YOLO + AIforThai API"""
    if 'file' not in request.files:
        return jsonify({'success': False, 'error': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤'})
    
    file = request.files['file']
    confidence = float(request.form.get('confidence', '0.7'))
    source = request.form.get('source', 'unknown')
    
    if file.filename == '':
        return jsonify({'success': False, 'error': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'})
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")[:-3]
        temp_filename = f"webcam_yolo_{timestamp}.jpg"
        temp_filepath = os.path.join(app.config['UPLOAD_FOLDER'], temp_filename)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        file.save(temp_filepath)
        print(f"üìÅ Saved temp file: {temp_filepath}")
        
        # Step 1: YOLO Detection
        detections = detect_license_plate_yolo(temp_filepath, confidence)
        
        if not detections:
            return jsonify({
                'success': False,
                'license_plate': '',
                'confidence': 0,
                'error': f'‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢ YOLO (confidence < {confidence})',
                'yolo_detections': [],
                'source': source,
                'confidence_threshold': confidence,
                'capture_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'temp_file': temp_filename
            })
        
        # Step 2: ‡πÉ‡∏ä‡πâ detection ‡∏ó‡∏µ‡πà‡∏°‡∏µ confidence ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        best_detection = max(detections, key=lambda x: x['confidence'])
        print(f"üéØ Best YOLO detection: confidence={best_detection['confidence']:.3f}")
        
        # Step 3: Crop license plate
        cropped_path = crop_license_plate(temp_filepath, best_detection['bbox'])
        if not cropped_path:
            return jsonify({
                'success': False,
                'error': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ',
                'yolo_detections': detections,
                'source': source,
                'confidence_threshold': confidence,
                'capture_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'temp_file': temp_filename
            })
        
        # Step 4: ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á AIforThai API
        api_result = send_to_lpr_api(cropped_path)
        
        # Step 5: ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result = {
            'success': api_result.get('success', False),
            'license_plate': api_result.get('license_plate', ''),
            'confidence': api_result.get('confidence', 0),
            'yolo_detections': detections,
            'yolo_confidence': best_detection['confidence'],
            'bbox': best_detection['bbox'],
            'api_result': api_result,
            'source': source,
            'confidence_threshold': confidence,
            'capture_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'temp_file': temp_filename,
            'cropped_file': os.path.basename(cropped_path)
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase (‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô)
        if result.get('success') and result.get('license_plate'):
            try:
                firebase_doc_id = firebase_manager.save_detection_result(
                    license_plate=result['license_plate'],
                    confidence_api=result.get('confidence', 0),
                    confidence_yolo=result.get('yolo_confidence', 0),
                    detection_mode="auto",  # YOLO+API = Auto mode
                    api_response=api_result  # ‡∏™‡πà‡∏á API response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                )
                if firebase_doc_id:
                    result['firebase_doc_id'] = firebase_doc_id
                    print(f"‚úÖ Saved to Firebase: {firebase_doc_id}")
            except Exception as firebase_error:
                print(f"‚ö†Ô∏è Firebase save failed: {firebase_error}")
                # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Firebase error ‡∏ó‡∏≥‡πÉ‡∏´‡πâ API fail
        
        print(f"üì° YOLO+API Result: {result}")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå Error in api_detect_yolo: {str(e)}")
        return jsonify({
            'success': False, 
            'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'
        })

@app.route('/history')
def history():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"""
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads
    files = []
    if os.path.exists(app.config['UPLOAD_FOLDER']):
        for filename in os.listdir(app.config['UPLOAD_FOLDER']):
            if allowed_file(filename):
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                stat = os.stat(filepath)
                files.append({
                    'filename': filename,
                    'size': f"{stat.st_size / 1024:.1f} KB",
                    'modified': datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                })
    
    files.sort(key=lambda x: x['modified'], reverse=True)
    return render_template('history.html', files=files)

@app.route('/api/info')
def api_info():
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API"""
    return jsonify({
        'api_url': API_URL,
        'status': 'active',
        'supported_formats': ['PNG', 'JPG', 'JPEG', 'GIF', 'BMP'],
        'max_file_size': '16MB',
        'firebase_connected': firebase_manager.is_connected()
    })

@app.route('/api/firebase/stats')
def firebase_stats():
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Firebase"""
    try:
        stats = get_stats()
        return jsonify({
            'success': True,
            'stats': stats
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/firebase/recent')
def firebase_recent():
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Firebase"""
    try:
        limit = int(request.args.get('limit', 20))
        recent = firebase_manager.get_recent_detections(limit)
        
        # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        for item in recent:
            if 'timestamp' in item and item['timestamp']:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ timestamp ‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ datetime object
                if hasattr(item['timestamp'], 'strftime'):
                    item['timestamp'] = item['timestamp'].strftime("%Y-%m-%d %H:%M:%S")
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        
        return jsonify({
            'success': True,
            'detections': recent,
            'count': len(recent)
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/firebase/search')
def firebase_search():
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firebase"""
    try:
        license_plate = request.args.get('license_plate')
        
        if not license_plate:
            return jsonify({
                'success': False,
                'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'
            })
        
        results = firebase_manager.search_detections(license_plate=license_plate)
        
        # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô string
        for item in results:
            if 'timestamp' in item and item['timestamp']:
                item['timestamp'] = item['timestamp'].strftime("%Y-%m-%d %H:%M:%S")
        
        return jsonify({
            'success': True,
            'results': results,
            'count': len(results),
            'search_term': license_plate
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/province-stats', methods=['GET'])
def get_province_stats():
    """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ"""
    try:
        stats = firebase_manager.get_province_stats()
        return jsonify({
            'success': True,
            'stats': stats
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/dashboard')
def dashboard():
    """‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firebase"""
    return render_template('dashboard.html')

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    debug = os.environ.get('FLASK_ENV') != 'production'
    app.run(debug=debug, host='0.0.0.0', port=port)
