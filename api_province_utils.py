#!/usr/bin/env python3
"""
API Province extraction utilities
"""

import re

def extract_province_from_api_response(api_response):
    """
    Extract province information from API response
    
    Args:
        api_response: Raw API response
        
    Returns:
        tuple: (province_name, confidence, region)
    """
    try:
        if not api_response or not isinstance(api_response, dict):
            return None, 0.0, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        
        # Check for province in raw_response
        raw_response = api_response.get('raw_response', {})
        if not raw_response:
            return None, 0.0, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        
        # Extract province from API
        api_province = raw_response.get('province', '')
        if not api_province:
            return None, 0.0, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        
        # Parse province format: "th-10:Bangkok (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£)"
        province_match = re.search(r'\(([^)]+)\)', api_province)
        if province_match:
            thai_province = province_match.group(1).strip()
            
            # Map to standardized province names and regions
            province_mapping = {
                '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£': ('‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'),
                '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': ('‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'),
                '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ': ('‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'),
                '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£': ('‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'),
                '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£': ('‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'),
                '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°': ('‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'),
                '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà': ('‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'),
                '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢': ('‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'),
                '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤': ('‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô'),
                '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô': ('‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô'),
                '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï': ('‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ'),
                '‡∏™‡∏á‡∏Ç‡∏•‡∏≤': ('‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ'),
                '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ': ('‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å'),
                '‡∏£‡∏∞‡∏¢‡∏≠‡∏á': ('‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å'),
                '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°': ('‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á'),
                '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ': ('‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á'),
                '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ': ('‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á'),
                '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå': ('‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á'),
                '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ': ('‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á')
            }
            
            if thai_province in province_mapping:
                province, region = province_mapping[thai_province]
                return province, 1.0, region
            else:
                # Fallback: use as-is with confidence 0.8
                return thai_province, 0.8, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        
        # Try to extract English province name
        english_match = re.search(r':([^(]+)', api_province)
        if english_match:
            english_province = english_match.group(1).strip()
            
            # Map common English names
            english_mapping = {
                'Bangkok': ('‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'),
                'Chiang Mai': ('‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'),
                'Chiang Rai': ('‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'),
                'Phuket': ('‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ'),
                'Khon Kaen': ('‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô'),
                'Nakhon Ratchasima': ('‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô'),
                'Chonburi': ('‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å'),
                'Songkhla': ('‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ')
            }
            
            if english_province in english_mapping:
                province, region = english_mapping[english_province]
                return province, 0.9, region
        
        return None, 0.0, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        
    except Exception as e:
        print(f"‚ö†Ô∏è Province extraction error: {e}")
        return None, 0.0, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'

def test_api_province_extraction():
    """Test API province extraction"""
    test_cases = [
        {
            'raw_response': {
                'province': 'th-10:Bangkok (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£)',
                'lp_number': '‡∏Å‡∏Å1234'
            }
        },
        {
            'raw_response': {
                'province': 'th-50:Chiang Mai (‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà)',
                'lp_number': '‡∏Ç‡∏Ç5678'
            }
        },
        {
            'raw_response': {
                'province': 'th-83:Phuket (‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï)',
                'lp_number': '‡∏†‡∏Å9999'
            }
        }
    ]
    
    print("üß™ Testing API Province Extraction:")
    print("=" * 50)
    
    for i, test_case in enumerate(test_cases, 1):
        province, confidence, region = extract_province_from_api_response(test_case)
        print(f"Test {i}:")
        print(f"   Input: {test_case['raw_response']['province']}")
        print(f"   Output: {province} ({confidence:.1f}) - {region}")
        print()

if __name__ == "__main__":
    test_api_province_extraction()
